Resources:
  CustomLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayOnboardPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource:
                  - '*'

  CognitoClientSecretToSSMLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: CognitoClientSecretToSSMLambda
    Properties:
      LogGroupName: /aws/lambda/credit-recommendation-cfn-lambda-${opt:stage}

  CognitoSecretToSSM:
    Type: Custom::ExecuteLambda
    DependsOn: CognitoClientSecretToSSMLambdaLogGroup
    Properties:
      ServiceToken: !GetAtt CognitoClientSecretToSSMLambda.Arn
      UserPoolClientConfig:
        - ssmName: ${self:provider.stage}-credit-recommendation-internal-app-client
          userPoolId: !Ref CreditRecommendationUserPool
          userPoolClientId: !Ref CreditRecommendationUserPoolClient
        - ssmName: !Join
            - ''
            - - ${self:provider.stage}-scindo-app-client-
              - !Ref ScindoUserPoolClient
          userPoolId: !Ref CreditRecommendationUserPool
          userPoolClientId: !Ref ScindoUserPoolClient

  CognitoClientSecretToSSMLambda:
    Type: AWS::Lambda::Function
    DependsOn: [ 'CreditRecommendationUserPoolClient', 'ScindoUserPoolClient' ]
    Properties:
      FunctionName: credit-recommendation-cfn-lambda-${opt:stage}
      Description: Used inside cloudformation template for storing client id secret to SSM parameter
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 30
      Role: !GetAtt CustomLambdaRole.Arn
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const AWS = require('aws-sdk');
          const ssm = new AWS.SSM({apiVersion: '2014-11-06'});
          const cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider({apiVersion: '2016-04-18'});

          async function deleteSSMParameter(ssmKeyName) {
              const params = {
                  Name: ssmKeyName
              };
              return await ssm.deleteParameter(params).promise();
          }

          async function putParameter(keyName, keyValue) {
              const params = {
                  Name: keyName, /* required */
                  Value: keyValue, /* required */
                  DataType: 'text',
                  Overwrite: true,
                  Type: "SecureString"
              };
              return await ssm.putParameter(params).promise();
          }

          async function describeUserPoolClient(clientId, UserPoolId) {
              var params = {
                  ClientId: clientId, /* required */
                  UserPoolId: UserPoolId /* required */
              };
              return await cognitoidentityserviceprovider.describeUserPoolClient(params).promise();
          }

          async function describeAndCreateSSMParameter(newClientPool) {
              let describeUserPoolClientResponse;
              try {
                  console.log(`fetching detail from userPool for userPoolClientID - ${newClientPool.userPoolClientId}`)
                  describeUserPoolClientResponse = await describeUserPoolClient(newClientPool.userPoolClientId, newClientPool.userPoolId);
              } catch (err) {
                  console.error(`error describing userPoolClient with userPoolClientId :: ${newClientPool.userPoolClientId}, userPool :: ${newClientPool.userPoolId} and error :: ${JSON.stringify(err)}`)
                  throw err;
              }

              if (describeUserPoolClientResponse) {
                  let ssmValue;

                  console.log(`checking if ClientName has 'credit-recommendation-internal'`)
                  if (describeUserPoolClientResponse.UserPoolClient.ClientName.includes('credit-recommendation-internal')) {
                      ssmValue = JSON.stringify({
                          clientId: describeUserPoolClientResponse.UserPoolClient.ClientId,
                          clientSecret: describeUserPoolClientResponse.UserPoolClient.ClientSecret
                      })
                  } else {
                      console.log(`ClientName does not have 'credit-recommendation-internal'`)
                      ssmValue = describeUserPoolClientResponse.UserPoolClient.ClientSecret;
                  }

                  try {
                      const ssmResponse = await putParameter(newClientPool.ssmName, ssmValue)
                      console.log(`ssm ${newClientPool.ssmName} inserted successfully :: ${JSON.stringify(ssmResponse)}`)
                  } catch (err) {
                      console.error(`error inserting ssm parameter with userPoolClientId :: ${newClientPool.userPoolClientId}, userPool :: ${newClientPool.userPoolId} and error :: ${JSON.stringify(err)}`)
                      throw err;
                  }
              }
          }

          async function getListOfConfigToCreateAndDelete(newUserPoolClientConfig, oldUserPoolClientConfig) {
              function getChangeList(configWithGreaterLengthArray, configWithLessLengthArray) {
                  let changeConfigArray = [];
                  for (let configWithGreaterLength of configWithGreaterLengthArray) {
                      let changeRequired = true;
                      for (let configWithLesserLength of configWithLessLengthArray) {
                          if (configWithLesserLength.ssmName === configWithGreaterLength.ssmName && configWithLesserLength.userPoolClientId === configWithGreaterLength.userPoolClientId && configWithLesserLength.userPoolId === configWithGreaterLength.userPoolId) {
                              changeRequired = false;
                              break;
                          }
                      }

                      if (changeRequired) {
                          changeConfigArray.push(configWithGreaterLength)
                      }
                  }

                  return changeConfigArray;
              }

              //find user pool client to create ssm parameter
              const createUserPoolSSMConfigArray = getChangeList(newUserPoolClientConfig, oldUserPoolClientConfig)

              //find user pool client to delete ssm parameter
              const deleteUserPoolSSMConfigArray = getChangeList(oldUserPoolClientConfig, newUserPoolClientConfig)

              return {deleteUserPoolSSMConfigArray, createUserPoolSSMConfigArray}
          }

          exports.handler = async function (event, context) {
              console.log("in handler");
              try {
                  console.log(`event = ${JSON.stringify(event)}`)
                  console.log(`eventRequestType = ${event.RequestType}`)

                  const userPoolClientConfig = event.ResourceProperties.UserPoolClientConfig;
                  console.log(`UserPoolClientConfig:: ${JSON.stringify(userPoolClientConfig)}`)

                  var responseData;

                  if (event.RequestType === "Update") {
                      const OldResourceProperties = event.OldResourceProperties.UserPoolClientConfig;
                      console.log(`OldResourceProperties:: ${JSON.stringify(OldResourceProperties)}`)
                      let deleteUserPoolSSMConfigArray = [], createUserPoolSSMConfigArray = [];

                      if (!userPoolClientConfig || userPoolClientConfig.length < 1) {
                          deleteUserPoolSSMConfigArray = OldResourceProperties;
                      } else if (!OldResourceProperties || OldResourceProperties.length < 1) {
                          createUserPoolSSMConfigArray = userPoolClientConfig;
                      } else {
                          const result = await getListOfConfigToCreateAndDelete(userPoolClientConfig, OldResourceProperties);
                          deleteUserPoolSSMConfigArray = result.deleteUserPoolSSMConfigArray;
                          createUserPoolSSMConfigArray = result.createUserPoolSSMConfigArray;
                      }

                      if (deleteUserPoolSSMConfigArray.length > 0) {
                          for (let client of deleteUserPoolSSMConfigArray) {
                              const ssmKey = client.ssmName;
                              try {
                                  console.log(`deleting ssm parameter with key ${ssmKey}`)
                                  const response = await deleteSSMParameter(ssmKey);
                                  console.log(`ssm key ${ssmKey} deleted successfully :: ${JSON.stringify(response)}`)
                              } catch (err) {
                                  console.error(`failed to delete ssm key ${ssmKey} :: ${JSON.stringify(err)}`)
                                  throw err;
                              }
                          }
                      } else {
                          console.log(`No change in userPoolClientConfig. Skipping delete of client for update operation`)
                      }

                      if (createUserPoolSSMConfigArray.length > 0) {
                          for (let client of createUserPoolSSMConfigArray) {
                              console.log(`creating ssm parameter with key ${client.ssmName}`)
                              await describeAndCreateSSMParameter(client);
                          }
                      } else {
                          console.log(`No change in userPoolClientConfig. Skipping create of client for update operation`)
                      }

                      responseData = {'message': 'updated successfully'};
                  } else if (event.RequestType === "Create") {

                      console.log(`inside create event type`)
                      if (userPoolClientConfig.length < 0) {
                          console.log(`Event creation skipped with request Type : 'Create' and userPoolLength : ${userPoolClientConfig.length}`)
                          const responseData = {"message": "skipped"};
                          await response.send(event, context, response.SUCCESS, responseData)
                      }
                      for (const newClientPool of userPoolClientConfig) {
                          await describeAndCreateSSMParameter(newClientPool);
                      }
                      responseData = {'message': 'created successfully'};
                  } else if (event.RequestType === "Delete") {
                      if (userPoolClientConfig.length > 0) {
                          for (let client of userPoolClientConfig) {
                              const ssmKey = client.ssmName;
                              try {
                                  console.log(`deleting ssm parameter with key ${ssmKey}`)
                                  const response = await deleteSSMParameter(ssmKey);
                                  console.log(`ssm key ${ssmKey} deleted successfully :: ${JSON.stringify(response)}`)
                              } catch (err) {
                                  console.error(`failed to delete ssm key ${ssmKey} :: ${JSON.stringify(err)}`)
                                  throw err;
                              }
                          }
                      } else {
                          console.log(`No client in userPoolClientConfig. Skipping delete of client for Delete operation`)
                      }
                      responseData = {'message': 'created successfully'};
                  } else {
                      const responseData = {"message": "skipped"};
                      await response.send(event, context, response.SUCCESS, responseData)
                  }

                  console.log("just before sending response");
                  await response.send(event, context, response.SUCCESS, responseData);
              } catch (ex) {
                  console.log(ex)
                  responseData = {"message": "error reading client secret"};
                  await response.send(event, context, response.SUCCESS, responseData);
              }
          };