Resources:
  CustomLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayOnboardPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource:
                  - '*'

  APIKeySecretToSSMLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: APIKeySecretToSSMLambda
    Properties:
      LogGroupName: /aws/lambda/credit-recommendation-cf-api-key-secret-ssm-lambda-${opt:stage}

  APIKeySecretToSSM:
    Type: Custom::ExecuteLambda
    DependsOn: APIKeySecretToSSMLambdaLogGroup
    Properties:
      ServiceToken: !GetAtt APIKeySecretToSSMLambda.Arn
      APIKeyConfig:
        - apiKeyID: !Ref CreditRecommendationApiGatewayApiKey
          apiKeyName: ${opt:stage}-credit-recommendation-internal-api-key
        - apiKeyID: !Ref ScindoApiGatewayApiKey
          apiKeyName: ${opt:stage}-scindo-api-key

  APIKeySecretToSSMLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - CreditRecommendationApiGatewayApiKey
      - ScindoApiGatewayApiKey
    Properties:
      FunctionName: credit-recommendation-cfn-api-key-secret-ssm-lambda-${opt:stage}
      Description: Used inside cloudformation template for storing api key secret to SSM parameter
      Handler: index.handler
      Runtime: nodejs16.x
      Timeout: 30
      Role: !GetAtt CustomLambdaRole.Arn
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const AWS = require('aws-sdk');
          const ssm = new AWS.SSM({apiVersion: '2014-11-06'});
          const apiGateway = new AWS.APIGateway({apiVersion: '2015-07-09'});

          async function deleteSSMParameter(ssmKeyName) {
              const params = {
                  Name: ssmKeyName
              };
              return await ssm.deleteParameter(params).promise();
          }

          async function putParameter(keyName, keyValue) {
              const params = {
                  Name: keyName, /* required */
                  Value: keyValue, /* required */
                  DataType: 'text',
                  Overwrite: true,
                  Type: "SecureString"
              };
              return await ssm.putParameter(params).promise();
          }

          async function describeAPIKey(apiKey) {
              var params = {
                  apiKey: apiKey,
                  includeValue: true
              };
              return await apiGateway.getApiKey(params).promise();
          }

          async function describeAndCreateSSMParameter(apiKey) {
              let describeApiKeyResponse;
              try {
                  console.log(`fetching detail for api key with id - ${apiKey}`)
                  describeApiKeyResponse = await describeAPIKey(apiKey);
              } catch (err) {
                  console.error(`error describing api key with id :: ${apiKey} with error :: ${JSON.stringify(err)}`)
                  throw err;
              }

              if (describeApiKeyResponse) {
                  let ssmValue;

                  console.log(`checking if API key has 'credit-recommendation-internal'`)
                  if (describeApiKeyResponse.name.includes('credit-recommendation-internal')) {
                      ssmValue = describeApiKeyResponse.value;
                      try {
                          const ssmResponse = await putParameter(describeApiKeyResponse.name, ssmValue)
                          console.log(`ssm ${describeApiKeyResponse.name} inserted successfully :: ${JSON.stringify(ssmResponse)}`)
                      } catch (err) {
                          console.error(`error inserting ssm parameter with api id :: ${apiKey} and error :: ${JSON.stringify(err)}`)
                          throw err;
                      }
                  } else {
                      console.log(`API key Name does not have 'credit-recommendation-internal'`)
                  }
              }
          }

          async function getListOfConfigToCreateAndDelete(newApiKeyConfig, oldApiKeyConfig) {
              function getChangeList(configWithGreaterLengthArray, configWithLessLengthArray) {
                  let changeConfigArray = [];
                  for (let configWithGreaterLength of configWithGreaterLengthArray) {
                      let changeRequired = true;
                      for (let configWithLesserLength of configWithLessLengthArray) {
                          if (configWithLesserLength.apiKeyID === configWithGreaterLength.apiKeyID && configWithLesserLength.apiKeyName === configWithGreaterLength.apiKeyName) {
                              changeRequired = false;
                              break;
                          }
                      }

                      if (changeRequired) {
                          changeConfigArray.push(configWithGreaterLength)
                      }
                  }

                  return changeConfigArray;
              }

              //find api key to create ssm parameter
              const createAPIKeySSMConfigArray = getChangeList(newApiKeyConfig, oldApiKeyConfig)

              //find api key to delete ssm parameter
              const deleteAPIKeySSMConfigArray = getChangeList(oldApiKeyConfig, newApiKeyConfig)

              return {deleteAPIKeySSMConfigArray, createAPIKeySSMConfigArray}
          }

          exports.handler = async function (event, context) {
              console.log("in handler");
              try {
                  console.log(`event = ${JSON.stringify(event)}`)
                  console.log(`eventRequestType = ${event.RequestType}`)

                  const apiKeyConfig = event.ResourceProperties.APIKeyConfig;
                  console.log(`apiKeyConfig:: ${JSON.stringify(apiKeyConfig)}`)

                  var responseData;

                  if (event.RequestType === "Update") {
                      const OldResourceProperties = event.OldResourceProperties.APIKeyConfig;
                      console.log(`OldResourceProperties:: ${JSON.stringify(OldResourceProperties)}`)
                      let deleteAPIKeySSMConfigArray = [], createAPIKeySSMConfigArray = [];

                      if (!apiKeyConfig || apiKeyConfig.length < 1) {
                          deleteAPIKeySSMConfigArray = OldResourceProperties;
                      } else if (!OldResourceProperties || OldResourceProperties.length < 1) {
                          createAPIKeySSMConfigArray = apiKeyConfig;
                      } else {
                          const result = await getListOfConfigToCreateAndDelete(apiKeyConfig, OldResourceProperties);
                          deleteAPIKeySSMConfigArray = result.deleteAPIKeySSMConfigArray;
                          createAPIKeySSMConfigArray = result.createAPIKeySSMConfigArray;
                      }

                      if (deleteAPIKeySSMConfigArray.length > 0) {
                          for (let client of deleteAPIKeySSMConfigArray) {
                              const ssmKey = client.apiKeyName;
                              try {
                                  console.log(`deleting ssm parameter with key ${ssmKey}`)
                                  const response = await deleteSSMParameter(ssmKey);
                                  console.log(`ssm key ${ssmKey} deleted successfully :: ${JSON.stringify(response)}`)
                              } catch (err) {
                                  console.error(`failed to delete ssm key ${ssmKey} :: ${JSON.stringify(err)}`)
                                  throw err;
                              }
                          }
                      } else {
                          console.log(`No change in apiKeyConfig. Skipping delete operation`)
                      }

                      if (createAPIKeySSMConfigArray.length > 0) {
                          for (let client of createAPIKeySSMConfigArray) {
                              console.log(`creating ssm parameter with key ${client.apiKeyName}`)
                              await describeAndCreateSSMParameter(client.apiKeyID);
                          }
                      } else {
                          console.log(`No change in apiKeyConfig. Skipping create operation`)
                      }

                      responseData = {'message': 'updated successfully'};
                  } else if (event.RequestType === "Create") {

                      console.log(`inside create event type`)
                      if (apiKeyConfig.length < 0) {
                          console.log(`Event creation skipped with request Type : 'Create' and apiKeyConfig : ${apiKeyConfig.length}`)
                          const responseData = {"message": "skipped"};
                          await response.send(event, context, response.SUCCESS, responseData)
                      }
                      for (const newApiConfig of apiKeyConfig) {
                          await describeAndCreateSSMParameter(newApiConfig.apiKeyID);
                      }
                      responseData = {'message': 'created successfully'};
                  } else if (event.RequestType === "Delete") {
                      if (apiKeyConfig.length > 0) {
                          for (let client of apiKeyConfig) {
                              const ssmKey = client.apiKeyName;
                              try {
                                  console.log(`deleting ssm parameter with key ${ssmKey}`)
                                  const response = await deleteSSMParameter(ssmKey);
                                  console.log(`ssm key ${ssmKey} deleted successfully :: ${JSON.stringify(response)}`)
                              } catch (err) {
                                  console.error(`failed to delete ssm key ${ssmKey} :: ${JSON.stringify(err)}`)
                                  throw err;
                              }
                          }
                      } else {
                          console.log(`No client in apiKeyConfig. Skipping delete operation`)
                      }
                      responseData = {'message': 'created successfully'};
                  } else {
                      const responseData = {"message": "skipped"};
                      await response.send(event, context, response.SUCCESS, responseData)
                  }

                  console.log("just before sending response");
                  await response.send(event, context, response.SUCCESS, responseData);
              } catch (ex) {
                  console.log(ex)
                  responseData = {"message": "error reading api key"};
                  await response.send(event, context, response.SUCCESS, responseData);
              }
          };